<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.jacobbrasil.snapkit_example">
	<!--
	io.flutter.app.FlutterApplication is an android.app.Application that
	calls FlutterMain.startInitialization(this); in its onCreate method.
	In most cases you can leave this as-is, but you if you want to provide
	additional functionality it is fine to subclass or reimplement
	FlutterApplication and put your custom class here.
	-->
	<application android:name="io.flutter.app.FlutterApplication" android:label="snapkit_example" android:icon="@mipmap/ic_launcher">

		<!-- SnapKit -->
		<!-- Make sure to change this to your own ClientID -->
		<meta-data android:name="com.snapchat.kit.sdk.clientId" android:value="f01d8f3b-807f-4da3-8788-ca4d4cf5cd75" />
    <!-- Make sure to change this to your own RedirectURL -->
		<meta-data android:name="com.snapchat.kit.sdk.redirectUrl" android:value="snapkit://redirect/url" />
		<meta-data android:name="com.snapchat.kit.sdk.scopes" android:resource="@array/snap_connect_scopes" />

    <activity
        android:name="com.snapchat.kit.sdk.SnapKitActivity"
        android:launchMode="singleTask">

        <intent-filter>
            <action android:name="android.intent.action.VIEW" />

            <category android:name="android.intent.category.DEFAULT" />
            <category android:name="android.intent.category.BROWSABLE" />

            <data
                android:scheme="snapkit"
                android:host="redirect"
                android:path="/url" />
        </intent-filter>

    </activity>

    <provider
        android:name="androidx.core.content.FileProvider"
        android:authorities="${applicationId}.fileprovider"
        android:exported="false"
        android:grantUriPermissions="true">
        <meta-data
            android:name="android.support.FILE_PROVIDER_PATHS"
            android:resource="@xml/file_paths" />
    </provider>

		<!-- SnapKit -->

		<activity android:name=".MainActivity" android:launchMode="singleTop" android:theme="@style/LaunchTheme" android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode" android:hardwareAccelerated="true" android:windowSoftInputMode="adjustResize">
			<!--
			Specifies an Android theme to apply to this Activity as soon as
			the Android process has started. This theme is visible to the user
			while the Flutter UI initializes. After that, this theme continues
			to determine the Window background behind the Flutter UI.
			-->
			<meta-data android:name="io.flutter.embedding.android.NormalTheme" android:resource="@style/NormalTheme" />
			<!--
			Displays an Android View that continues showing the launch screen
			Drawable until Flutter paints its first frame, then this splash
			screen fades out. A splash screen is useful to avoid any visual
			gap between the end of Android's launch screen and the painting of
			Flutter's first frame.
			-->
			<meta-data android:name="io.flutter.embedding.android.SplashScreenDrawable" android:resource="@drawable/launch_background" />
			<intent-filter>
				<action android:name="android.intent.action.MAIN" />
				<category android:name="android.intent.category.LAUNCHER" />
			</intent-filter>
		</activity>
		<!--
		Don't delete the meta-data below.
		This is used by the Flutter tool to generate GeneratedPluginRegistrant.java
		-->
		<meta-data android:name="flutterEmbedding" android:value="2" />
	</application>
</manifest>
